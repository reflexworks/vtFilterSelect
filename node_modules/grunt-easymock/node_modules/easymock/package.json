{
  "name": "easymock",
  "description": "Easy to use mock server that supports templates and routes.",
  "keywords": [
    "server",
    "mock",
    "routes",
    "proxy"
  ],
  "author": {
    "name": "Patrick Boos",
    "email": "mail@pboos.ch"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/cyberagent/node-easymock.git"
  },
  "version": "0.2.6",
  "main": "index",
  "bin": {
    "easymock": "./bin/easymock"
  },
  "scripts": {
    "test": "make tests"
  },
  "dependencies": {
    "express": "3.1.0",
    "http-proxy": "0.10.3",
    "jade": "0.27.7",
    "underscore": "1.4.2",
    "broware": "0.1.0",
    "sqlite3": "2.2.3",
    "moment": "2.0.0",
    "marked": "0.2.10",
    "commander": "2.1.0"
  },
  "devDependencies": {
    "chai": "1.1.0",
    "mocha": "1.2.2",
    "coffee-script": "1.3.3",
    "underscore": "1.4.2",
    "request": "2.14.0"
  },
  "readme": "# EasyMock Server\n\n## Usage\n\n        $ npm install -g easymock\n        $ easymock\n\n\n\n## Files\nAll files from the running folder are present as static files. So place anything in there and it is accessible with GET filename.\n\n### Differentiating GET/POST/PUT/DELETE\nIf you want to use advanced serving features like GET/POST/PUT/DELETE or templates in json, provide files like in the example below:\n\n        GET /items/1 => items/1_get.json\n        POST /items/1 => items/1_post.json\n        ...\n\n\n\n## config.json\nIf you want to configure routes, proxy or lag, create a config.json file which looks kind of like this:\n\n        {\n          \"simulated-lag\": 1000,\n          \"cors\": false,\n          \"jsonp\": false,\n          \"proxy\": {\n            \"server\": \"http://yourrealapi.com\",\n            \"default\": false,\n            \"calls\": {\n              \"/items/1\": { \"get\": true, \"post\": false },\n              \"/items\": false\n            }\n          },\n          \"variables\": {\n            \"server\": \"http://server.com\"\n          },\n          \"routes\": [\n            \"/user/:userid\",\n            \"/user/:userid/profile\",\n            \"/user/:userid/inbox/:messageid\"\n          ]\n        }\n\n### Variables\nVariables that you define in your config.json can be used in files that have the \\_get/\\_post/... extension. As well you can use them in your templates.\n\nExample to use variables. item_get.json:\n\n        { \"image\": \"#{server}/img.jpg\" }\n\nThis will return:\n\n        { \"image\": \"http://server.com/img.jpg\"}\n\n## GET query and POST body fields as Variables\nAny field given in GET or POST can be used like other variables.\n\n        Example: GET /search?q=test\n\nWill provide you with a usable ```#{q}``` in your json file.\n\nAny\n\n### Routes\nThe routes defined in the config.json will get mapped to one corresponding file in which the given name will be available as a variable.\n\nWith the above config.json a call to GET /user/1234 would get mapped to the file: /user/userid_get.json. Inside that file one could write:\n\n    { \"id\": #{userid} }\n\nIf this is the file, the result would be ```{ \"userid\": 1234 }```\n\n\n\n## Templates\nIf you have items that are used over and over again, you can make templates for them and reuse the same template.\n\nFor that create a folder \"_templates\" and in it place for example a file object.json:\n\n        { \"name\": \"my object\" }\n\nThen you can refer this template out of another file like items_get.json:\n\n        [ \"{{object}}\", \"{{object}}\", \"{{object}}\", \"{{object}}\"\" ]\n\nThis will return a array with four times the object from the template.\n\n### Parameters\n\nYou can even use parameters. For example you have a template Object.json:\n\n         {\n            \"name\": \"Item #{_1}\",\n            \"image\": \"#{server}/img/img_#{_2}.jpg\",\n            \"active\": #{_3}\n          }\n\nAnd then a api object called items_get.json:\n\n          [\n            \"{{Object(1,one,true)}}\",\n            \"{{Object(2,two,false)}}\",\n            \"{{Object(3,three,true)}}\"\n          ]\n\nYou will receive the following response:\n\n          [\n             {\n                \"name\":\"Item 1\",\n                \"image\":\"http://server.com/img/img_one.jpg\",\n                \"active\":true\n             },\n             {\n                \"name\":\"Item 2\",\n                \"image\":\"http://server.com/img/img_two.jpg\",\n                \"active\":false\n             },\n             {\n                \"name\":\"Item 3\",\n                \"image\":\"http://server.com/img/img_three.jpg\",\n                \"active\":true\n             }\n          ]\n\n\n\n## Response headers\nYou can specify the status code for the response with @status and add headers with @header. The following example is for doing a redirect response.\n\n    < @status 301\n    < @header Location: http://www.cyberagent.co.jp\n\nWill respond with:\n\n    HTTP/1.1 301 Moved Permanently\n    x-powered-by: Express\n    location: http://www.cyberagent.co.jp\n    content-type: text/html; charset=utf-8\n    content-length: 0\n    date: Tue, 12 Mar 2013 08:21:39 GMT\n    connection: close\n\n## Documentation\neasymock automatically documents the API it represents. This documentation can be extended by adding additional information like description, input info and output info to the json file. This is an example on how to do that for example in test_post.json:\n\n    # This is some documentation\n    # This call creates an object\n    > Parameters:\n    > - name\n    > - description (optional)\n    < @status 200\n    < @header Content-Type: application/json\n    {\n      \"id\": 1234,\n      \"name\": \"your name\",\n      \"description\": \"your description\"\n    }\n\nTo add some general information in the documentation, add a file \"_documentation/index.md\". That one will be shown at the top of the documented calls.\n\n## Logging\nAll requests get logged and can be inspected. You can do so at http://localhost:3000/_logs/.\n\n\n## CORS and JSONP\nCan be enabled by setting either \"jsonp\" or \"cors\" or both to true in the config.json.\n\n\n## Errors\nEasymock can return errors defined in the documentation. the config.json set \"error-rate\": 0.5, to have a 50% error rate. So one out of 2 calls in average will return an error.\nTo specify an error, first add a error json file in \\_documentation. For example \"\\_documentation/error\\_not\\_authenticated.json\":\n\n    < @status 401\n    {\n      \"error\": \"Authentication required\"\n    }\n\nIn the mock file add an error like the following (example user.json):\n\n    < @error sample\n    < @error sample2\n\nIf there are multiple errors like above, it will randomly select one. The name after @error indicates the file name. \"@error sample\" will serve \"\\_documentation/error_sample.json\".\n\n## Run tests\n\n    make tests\n\n\n\n## License\n\n    (MIT License)\n\n    Copyright (C) 2012 CyberAgent\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/cyberagent/node-easymock/issues"
  },
  "homepage": "https://github.com/cyberagent/node-easymock",
  "_id": "easymock@0.2.6",
  "_shasum": "da10e185e2668135753f2d0f4ce345d3a21898d5",
  "_from": "easymock@~0.2.6",
  "_resolved": "https://registry.npmjs.org/easymock/-/easymock-0.2.6.tgz"
}
